<?php

namespace App\Services\Payment;


use Exception;
use Stripe\Charge;
use Stripe\Stripe;
use App\Models\Booking;
use App\Models\Payment;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Jobs\SendBookingConfirmedEmail;

class PaymentService

{

    /**

     * Process a payment for a reservation.
     *
     * @param array $data An associative array containing the payment details:
     *                    - 'booking_id': The ID of the booking.
     *                    - 'amount': The amount to be charged.
     *                    - 'stripeToken': The token generated by Stripe.
     * @return StripeCharge|array The charge object if successful, or an error array if failed.
     */
    public function processPayment(array $data): array
    {
        DB::beginTransaction();

        try {
            Stripe::setApiKey(env('STRIPE_SECRET_KEY'));

            $booking = Booking::find($data['booking_id']);
            if (!$booking) {
                throw new Exception('Not enough available seats.');
            }

            // Process payment
            $charge = Charge::create([
                'amount' => $data['amount'] * 100, // Convert to cents
                'currency' => 'usd',
                'source' => $data['stripeToken'],
                'description' => 'Payment for booking ID: ' . $booking->id,
            ]);

            // Save payment details using the Payment model
            $payment = Payment::create([
                'booking_id' => $booking->id,
                'amount' => $data['amount'],
                'transaction_id' => $charge->id,
                'status' => 'paid',
            ]);

            // Update booking status
            $booking->payment_status = 'paid';
            $booking->status = 'confirmed';
            $booking->save();

            // Get the user
            $user = $booking->user;
            if ($booking->email_sent_at === null) {
                $user = $booking->user;

                SendBookingConfirmedEmail::dispatch($user, $booking);
                $updated = $booking->update(['email_sent_at' => now()]);
               $booking->save();

                Log::info('Update result: ' . ($updated ? 'Success' : 'Failed'));
            }



            DB::commit();

            return [
                'status' => 'success',
                'message' => 'Payment processed successfully',
                'data' =>  Payment::with('booking')->find($payment->id),
            ];
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('PaymentService Error: ' . $e->getMessage());
            return ['status' => 'error', 'message' => 'Payment processing failed'];
        }
    }
}
